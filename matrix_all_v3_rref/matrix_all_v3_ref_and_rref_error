# matrix class definition
class Matrix:
    #initialize the matrix
    def __init__(self, data):
        #store the data in the matrix
        self.data = data
        #get the number of rows
        self.rows = len(data)
        #get the number of columns
        if self.rows > 0:
            self.cols = len(data[0])
        else:
            self.cols = 0
        #end of initialization

    #function to print the matrix
    def print(self):
        #loop through each row
        for row in self.data:
            #print the row
            print(row)
        #end of print function

    #function to add two matrices
    def plus(self, other):
        #check if dimensions match
        if self.rows != other.rows or self.cols != other.cols:
            print("matrices cannot be added")
            return None
        #create an empty list to store result
        result = []
        #loop through rows
        for i in range(self.rows):
            #create a new row
            newrow = []
            #loop through columns
            for j in range(self.cols):
                #add corresponding elements
                sum = self.data[i][j] + other.data[i][j]
                newrow.append(sum)
            #add the row to result
            result.append(newrow)
        #return the new matrix
        return Matrix(result)
        #end of plus function

    #function to multiply two matrices
    def times(self, other):
        #check if matrices can be multiplied
        if self.cols != other.rows:
            print("matrices cannot be multiplied")
            return None
        #create an empty list to store result
        result = []
        #loop through rows of self
        for i in range(self.rows):
            #create a new row
            newrow = []
            #loop through columns of other
            for j in range(other.cols):
                #initialize the sum
                sum = 0
                #loop through elements
                for k in range(self.cols):
                    #multiply and add
                    product = self.data[i][k] * other.data[k][j]
                    sum = sum + product
                #append the sum to the row
                newrow.append(sum)
            #add the row to result
            result.append(newrow)
        #return the new matrix
        return Matrix(result)
        #end of times function

    #function to multiply a scalar times a row
    def scalarTimesRow(self, scalar, rownumber):
        #check if row number is valid
        if rownumber < 0 or rownumber >= self.rows:
            print("invalid row number")
            return None
        #multiply the row by the scalar
        newrow = []
        for i in range(self.cols):
            product = self.data[rownumber][i] * scalar
            newrow.append(product)
        #replace the row in the matrix
        self.data[rownumber] = newrow
        #return the matrix
        return self
        #end of scalarTimesRow function

    #function to switch two rows
    def switchRows(self, firstrow, secondrow):
        #check if row numbers are valid
        if firstrow < 0 or firstrow >= self.rows or secondrow < 0 or secondrow >= self.rows:
            print("invalid row numbers")
            return None
        #switch the rows
        temp = self.data[firstrow]
        self.data[firstrow] = self.data[secondrow]
        self.data[secondrow] = temp
        #return the matrix
        return self
        #end of switchRows function

    #function to perform linear combination of rows
    def linearCombRows(self, scalar, source_row, target_row):
        #adds scalar times source_row to target_row
        #check if row numbers are valid
        if source_row < 0 or source_row >= self.rows or target_row < 0 or target_row >= self.rows:
            print("invalid row numbers")
            return None
        #compute scalar times source row
        scalar_row = []
        for i in range(self.cols):
            product = self.data[source_row][i] * scalar
            scalar_row.append(product)
        #add to target row
        newrow = []
        for i in range(self.cols):
            sum = self.data[target_row][i] + scalar_row[i]
            newrow.append(sum)
        #replace the target row
        self.data[target_row] = newrow
        #return the matrix
        return self
        #end of linearCombRows function

    #function to compute the determinant
    def determinant(self):
        #check if matrix is square
        if self.rows != self.cols:
            print("determinant not defined for nonsquare matrices")
            return None
        #base case for 2x2 matrix
        if self.rows == 2:
            a = self.data[0][0]
            b = self.data[0][1]
            c = self.data[1][0]
            d = self.data[1][1]
            det = a * d - b * c
            return det
        #recursive case
        det = 0
        for c in range(self.cols):
            minor = self.getMinor(0, c)
            cofactor = ((-1) ** c) * self.data[0][c]
            minor_det = minor.determinant()
            det = det + cofactor * minor_det
        return det
        #end of determinant function

    #function to get minor of the matrix
    def getMinor(self, i, j):
        #get minor matrix by removing row i and column j
        minor_data = []
        for row in range(self.rows):
            if row != i:
                newrow = []
                for col in range(self.cols):
                    if col != j:
                        newrow.append(self.data[row][col])
                minor_data.append(newrow)
        #return the minor matrix
        return Matrix(minor_data)
        #end of getMinor function

    #function to transpose the matrix
    def transpose(self):
        #create an empty list to store result
        result = []
        #loop through columns
        for i in range(self.cols):
            newrow = []
            #loop through rows
            for j in range(self.rows):
                #append element
                newrow.append(self.data[j][i])
            #add new row to result
            result.append(newrow)
        #return the transposed matrix
        return Matrix(result)
        #end of transpose function

    #function to perform row echelon form (ref)
    def ref(self):
        #copy the matrix data
        mtrx = [row[:] for row in self.data]
        #number of rows and columns
        rowcount = self.rows
        colcount = self.cols
        #start with the first pivot
        lead = 0
        for r in range(rowcount):
            if lead >= colcount:
                break
            i = r
            while mtrx[i][lead] == 0:
                i += 1
                if i == rowcount:
                    i = r
                    lead += 1
                    if colcount == lead:
                        lead -=1
                        break
            #swap rows
            mtrx[i], mtrx[r] = mtrx[r], mtrx[i]
            #eliminate entries below the pivot
            pivot = mtrx[r][lead]
            for i in range(r+1, rowcount):
                factor = mtrx[i][lead] / pivot
                for j in range(lead, colcount):
                    mtrx[i][j] = mtrx[i][j] - factor * mtrx[r][j]
            lead += 1
        #return the ref matrix
        return Matrix(mtrx)
        #end of ref function

    #function to perform reduced row echelon form (rref)
    def rowreduce(self):
        #copy the matrix data
        mtrx = [row[:] for row in self.data]
        #number of rows and columns
        rowcount = self.rows
        colcount = self.cols
        #initialize lead variable
        lead = 0
        for r in range(rowcount):
            if lead >= colcount:
                break
            i = r
            while mtrx[i][lead] == 0:
                i +=1
                if i == rowcount:
                    i = r
                    lead +=1
                    if colcount == lead:
                        lead -=1
                        break
            #swap rows
            mtrx[i], mtrx[r] = mtrx[r], mtrx[i]
            #divide row r by mtrx[r][lead]
            pivot = mtrx[r][lead]
            mtrx[r] = [ mrx / pivot for mrx in mtrx[r]]
            #eliminate other rows
            for i in range(rowcount):
                if i != r:
                    factor = mtrx[i][lead]
                    mtrx[i] = [ iv - factor * rv for rv, iv in zip(mtrx[r], mtrx[i])]
            lead +=1
        #return the rref matrix
        return Matrix(mtrx)
        #end of rowreduce function

    #function to invert the matrix
    def invert(self):
        #check if matrix is square
        if self.rows != self.cols:
            print("only square matrices can be inverted")
            return None
        #compute determinant to check if matrix is singular
        det = self.determinant()
        if det == 0 or det is None:
            print("matrix is singular and cannot be inverted")
            return None
        #create identity matrix
        identity = []
        for i in range(self.rows):
            row = []
            for j in range(self.cols):
                if i == j:
                    row.append(1)
                else:
                    row.append(0)
            identity.append(row)
        #augment the matrix with the identity matrix
        mtrx = [self.data[i] + identity[i] for i in range(self.rows)]
        #number of rows and columns
        rowcount = self.rows
        colcount = self.cols * 2
        #perform gauss-jordan elimination
        lead = 0
        for r in range(rowcount):
            if lead >= colcount:
                break
            i = r
            while mtrx[i][lead] == 0:
                i +=1
                if i == rowcount:
                    i = r
                    lead +=1
                    if colcount == lead:
                        print("matrix is singular and cannot be inverted")
                        return None
            #swap rows
            mtrx[i], mtrx[r] = mtrx[r], mtrx[i]
            #divide row r
            pivot = mtrx[r][lead]
            mtrx[r] = [ mrx / pivot for mrx in mtrx[r]]
            #eliminate other rows
            for i in range(rowcount):
                if i != r:
                    factor = mtrx[i][lead]
                    mtrx[i] = [ iv - factor * rv for rv, iv in zip(mtrx[r], mtrx[i])]
            lead +=1
        #extract the inverse matrix
        inverse_data = [ row[self.cols:] for row in mtrx ]
        #return the inverse matrix
        return Matrix(inverse_data)
        #end of invert function

#function to get user input for matrix
def get_matrix_input(name):
    #ask user for number of rows
    try:
        rows = int(input(f"enter the number of rows for matrix {name}: "))
    except ValueError:
        print("invalid input for number of rows")
        return None
    #ask user for number of columns
    try:
        cols = int(input(f"enter the number of columns for matrix {name}: "))
    except ValueError:
        print("invalid input for number of columns")
        return None
    #initialize empty data list
    data = []
    #loop through rows
    for i in range(rows):
        #ask user for row data
        print(f"enter the entries for row {i+1} of matrix {name}, separated by spaces:")
        entries = input().split()
        #check if number of entries matches columns
        if len(entries) != cols:
            print("number of entries does not match number of columns")
            return None
        #convert entries to floats
        row = []
        for entry in entries:
            try:
                value = float(entry)
            except ValueError:
                print("invalid entry, must be a number")
                return None
            row.append(value)
        #add row to data
        data.append(row)
    #return the matrix
    return Matrix(data)
    #end of get_matrix_input function

#main program
def main():
    #initialize matrices to None
    jack = None
    jill = None
    while True:
        print("\nchoose an operation:")
        print("1 add two matrices")
        print("2 multiply two matrices")
        print("3 scalar times row")
        print("4 switch rows")
        print("5 linear combination of rows")
        print("6 row echelon form (ref)")
        print("7 reduced row echelon form (rref)")
        print("8 invert a matrix")
        print("9 determinant of a matrix")
        print("10 transpose a matrix")
        print("q quit")
        #get user's choice
        choice = input("enter the number of the operation you want to perform: ")

        if choice == 'q':
            print("goodbye!")
            break

        if choice in ['1', '2']:
            #check if matrices are already defined
            if jack is None or jill is None:
                print("you need to input two matrices.")
                jack = get_matrix_input("jack")
                if jack is None:
                    continue
                jill = get_matrix_input("jill")
                if jill is None:
                    continue
            else:
                #sometimes you cannot use existing matrices if you pick a different operation
                use_existing = input("do you want to use the existing matrices? (y/n): ")
                if use_existing.lower() == 'n':
                    jack = get_matrix_input("jack")
                    if jack is None:
                        continue
                    jill = get_matrix_input("jill")
                    if jill is None:
                        continue
            if choice == '1':
                #addition
                result = jack.plus(jill)
                if result:
                    print("the sum of the matrices is:")
                    result.print()
            elif choice == '2':
                #multiplication
                result = jack.times(jill)
                if result:
                    print("the product of the matrices is:")
                    result.print()
        elif choice in ['3', '4', '5', '6', '7', '8', '9', '10']:
            #check if matrix jack is already defined
            if jack is None:
                print("you need to input a matrix.")
                jack = get_matrix_input("jack")
                if jack is None:
                    continue
            else:
                #sometimes you cannot use existing matrix if you pick a different operation
                use_existing = input("do you want to use the existing matrix? (y/n): ")
                if use_existing.lower() == 'n':
                    jack = get_matrix_input("jack")
                    if jack is None:
                        continue
            if choice == '3':
                #scalar times row
                try:
                    scalar = float(input("enter the scalar: "))
                except ValueError:
                    print("invalid scalar")
                    continue
                try:
                    rownumber = int(input("enter the row number (starting from 0): "))
                except ValueError:
                    print("invalid row number")
                    continue
                result = jack.scalarTimesRow(scalar, rownumber)
                if result:
                    print("the matrix after scalar multiplication is:")
                    result.print()
            elif choice == '4':
                #switch rows
                try:
                    firstrow = int(input("enter the first row number (starting from 0): "))
                    secondrow = int(input("enter the second row number (starting from 0): "))
                except ValueError:
                    print("invalid row number")
                    continue
                result = jack.switchRows(firstrow, secondrow)
                if result:
                    print("the matrix after switching rows is:")
                    result.print()
            elif choice == '5':
                #linear combination of rows
                try:
                    scalar = float(input("enter the scalar: "))
                    source_row = int(input("enter the source row number (starting from 0): "))
                    target_row = int(input("enter the target row number (starting from 0): "))
                except ValueError:
                    print("invalid input")
                    continue
                result = jack.linearCombRows(scalar, source_row, target_row)
                if result:
                    print("the matrix after linear combination is:")
                    result.print()
            elif choice == '6':
                #row echelon form
                result = jack.ref()
                if result:
                    print("the row echelon form of the matrix is:")
                    result.print()
            elif choice == '7':
                #reduced row echelon form
                result = jack.rowreduce()
                if result:
                    print("the reduced row echelon form of the matrix is:")
                    result.print()
            elif choice == '8':
                #invert matrix
                determinant = jack.determinant()
                if determinant == 0 or determinant is None:
                    print("matrix is singular and cannot be inverted")
                    continue
                result = jack.invert()
                if result:
                    print("the inverse of the matrix is:")
                    result.print()
            elif choice == '9':
                #determinant
                determinant = jack.determinant()
                if determinant is not None:
                    print(f"the determinant of the matrix is: {determinant}")
            elif choice == '10':
                #transpose
                result = jack.transpose()
                if result:
                    print("the transpose of the matrix is:")
                    result.print()
        else:
            print("invalid choice")
    #end of main function

if __name__ == "__main__":
    main()
